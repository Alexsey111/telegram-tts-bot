# telegram_tts_bot.py
import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import config
from voice import VoiceManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramTTSBot:
    """–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å"""

    def __init__(self):
        self.voice_manager = VoiceManager()
        self.user_states = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        # –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–Ω–∏–∑—É (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–¥ —Å—Ç—Ä–æ–∫–æ–π –≤–≤–æ–¥–∞)
        # reply_markup –¥–ª—è send_message / reply_text - ReplyKeyboardMarkup –∑–∞–∫—Ä–µ–ø–ª—è–µ—Ç—Å—è –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
        self.bottom_keyboard = ReplyKeyboardMarkup(
            [["üé≠ –í—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]],
            resize_keyboard=True,
            one_time_keyboard=False,
        )

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        self.user_states[user_id] = {'waiting_for_text': False, 'selected_voice': None}

        welcome_text = (
            "üé§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Text-to-Speech –±–æ—Ç!\n\n"
            "–Ø –æ–∑–≤—É—á–∏–≤–∞—é —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø—Ä–∏—à–ª—ë—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É—è ElevenLabs AI.\n\n"
            "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ 'üé≠ –í—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≥–æ–ª–æ—Å.\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç (–¥–æ {} —Å–∏–º–≤–æ–ª–æ–≤).\n"
            "‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ mp3 —Å –æ–∑–≤—É—á–∫–æ–π.".format(config.MAX_TEXT_LENGTH)
        )

        # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –∏–∑ callback_query ‚Äî –æ—Ç–≤–µ—Ç–∏–º –Ω–µ–º–Ω–æ–≥–æ –∏–Ω–∞—á–µ
        if update.callback_query:
            try:
                await update.callback_query.message.reply_text(welcome_text, reply_markup=self.bottom_keyboard)
            except Exception:
                await update.effective_message.reply_text(welcome_text, reply_markup=self.bottom_keyboard)
        else:
            await update.effective_message.reply_text(welcome_text, reply_markup=self.bottom_keyboard)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
            "1. –ù–∞–∂–º–∏—Ç–µ 'üé≠ –í—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å' –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /voices\n"
            "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏\n"
            "3. –ü–æ–ª—É—á–∏—Ç–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª —Å –æ–∑–≤—É—á–∫–æ–π\n\n"
            f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {config.MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤"
        )
        await update.effective_message.reply_text(help_text, reply_markup=self.bottom_keyboard)

    async def voices_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /voices"""
        await self.show_voice_selection(update, context)

    async def show_voice_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞"""
        try:
            voices = self.voice_manager.get_voices()

            if not voices:
                await update.effective_message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=self.bottom_keyboard)
                return

            # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–æ–ª–æ—Å–∞–º–∏ (–ø–µ—Ä–≤—ã–µ 10)
            keyboard = []
            for i, voice in enumerate(voices[:10]):
                voice_name = voice.get('name', 'Unknown')
                voice_id = voice.get('voice_id') or voice.get('id')
                button_text = f"üé§ {voice_name}"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=f"voice_{voice_id}")])

            if len(voices) > 10:
                keyboard.append([InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ", callback_data="more_voices")])

            # –ö–Ω–æ–ø–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç start
            keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])

            reply_markup = InlineKeyboardMarkup(keyboard)

            message_text = (
                "üé≠ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∫–∏:\n\n"
                f"–ù–∞–π–¥–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤: {len(voices)}\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:"
            )

            if update.callback_query:
                await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup)
            else:
                await update.effective_message.reply_text(message_text, reply_markup=reply_markup)
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–æ–ª–æ—Å–æ–≤: %s", e)
            await update.effective_message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–æ–ª–æ—Å–æ–≤.", reply_markup=self.bottom_keyboard)

    async def handle_voice_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞ (callback data voice_{id})"""
        query = update.callback_query
        await query.answer()

        user_id = update.effective_user.id
        voice_id = query.data.split("_", 1)[1]

        try:
            voices = self.voice_manager.get_voices()
            selected_voice = next((v for v in voices if (v.get('voice_id') or v.get('id')) == voice_id), None)

            if selected_voice:
                self.user_states.setdefault(user_id, {'waiting_for_text': False, 'selected_voice': None})
                self.user_states[user_id]['selected_voice'] = selected_voice

                success_text = (
                    f"‚úÖ –í—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å: *{selected_voice.get('name', 'Unknown')}*\n\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {selected_voice.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n\n"
                    "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏!"
                )

                keyboard = [
                    [InlineKeyboardButton("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ–ª–æ—Å", callback_data="select_voice")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.edit_message_text(success_text, reply_markup=reply_markup, parse_mode='Markdown')
            else:
                await query.edit_message_text("‚ùå –ì–æ–ª–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π.")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–æ–ª–æ—Å–∞: %s", e)
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–æ–ª–æ—Å–∞.")

    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        await query.answer()

        if query.data == "select_voice":
            await self.show_voice_selection(update, context)
        elif query.data == "back_to_main":
            await self.start_command(update, context)
        elif query.data.startswith("voice_"):
            await self.handle_voice_selection(update, context)
        elif query.data == "more_voices":
            # –í —ç—Ç–æ–º –ø—Ä–æ—Å—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é.
            await query.edit_message_text("üöß –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –ü–æ–∫–∞–∑—ã–≤–∞—é –ø–µ—Ä–≤—ã–µ 10 –≥–æ–ª–æ—Å–æ–≤.")
            await self.show_voice_selection(update, context)

    async def show_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
        help_text = (
            "üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
            "1. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å\n"
            "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏\n"
            "3. –ü–æ–ª—É—á–∏—Ç–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª —Å –æ–∑–≤—É—á–∫–æ–π\n\n"
            f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {config.MAX_TEXT_LENGTH}"
        )

        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(help_text, reply_markup=reply_markup)

    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –Ω–∞–∂–∞—Ç–∏–π persistent-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        user_id = update.effective_user.id

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if user_id not in self.user_states:
            self.user_states[user_id] = {'waiting_for_text': False, 'selected_voice': None}

        text = update.message.text.strip()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ persistent keyboard –Ω–∞–∂–∞—Ç–∏–π
        if text == "üé≠ –í—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å":
            await self.show_voice_selection(update, context)
            return
        if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.start_command(update, context)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
        if len(text) > config.MAX_TEXT_LENGTH:
            await update.message.reply_text(
                f"‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º—É–º {config.MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.\n–í–∞—à —Ç–µ–∫—Å—Ç: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤.",
                reply_markup=self.bottom_keyboard
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –≥–æ–ª–æ—Å
        if not self.user_states[user_id]['selected_voice']:
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –∫–æ–º–∞–Ω–¥–æ–π /voices –∏–ª–∏ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:",
                reply_markup=self.bottom_keyboard
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_message = await update.message.reply_text("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à —Ç–µ–∫—Å—Ç...", reply_markup=self.bottom_keyboard)

        try:
            selected_voice = self.user_states[user_id]['selected_voice']
            voice_id = selected_voice.get('voice_id') or selected_voice.get('id')

            # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ
            safe_filename = f"user_{user_id}_{processing_message.message_id}.mp3"
            audio_path = self.voice_manager.generate_audio(
                text=text,
                voice_id=voice_id,
                output_filename=safe_filename
            )

            if audio_path and os.path.exists(audio_path):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
                with open(audio_path, 'rb') as audio_file:
                    await context.bot.send_audio(
                        chat_id=update.effective_chat.id,
                        audio=audio_file,
                        title=f"–û–∑–≤—É—á–∫–∞: {selected_voice.get('name', 'Voice')}",
                        performer="ElevenLabs TTS Bot",
                        caption=f"üé§ –û–∑–≤—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–º: *{selected_voice.get('name', 'Voice')}*\nüìù {text[:500]}{'...' if len(text) > 500 else ''}",
                        parse_mode='Markdown',
                    )

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    os.remove(audio_path)
                except Exception:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª %s", audio_path)

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                try:
                    await processing_message.delete()
                except Exception:
                    pass

                # –í –∫–æ–Ω—Ü–µ –æ—Ç–ø—Ä–∞–≤–∏–º persistent –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (—á—Ç–æ–±—ã –æ—Å—Ç–∞–ª–∞—Å—å –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–π)
                await update.effective_message.reply_text("–ì–æ—Ç–æ–≤–æ! –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç.", reply_markup=self.bottom_keyboard)
            else:
                await processing_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=self.bottom_keyboard)
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: %s", e)
            try:
                await processing_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=self.bottom_keyboard)
            except Exception:
                pass

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(config.TELEGRAM_BOT_TOKEN).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("voices", self.voices_command))
        application.add_handler(CallbackQueryHandler(self.handle_callback_query))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
        if config.TELEGRAM_BOT_TOKEN == "YOUR_TELEGRAM_BOT_TOKEN_HERE":
            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –≤ config.py")
            return

        if config.ELEVENLABS_API_KEY == "YOUR_ELEVENLABS_API_KEY_HERE":
            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω API –∫–ª—é—á ElevenLabs –≤ config.py")
            return

        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot = TelegramTTSBot()
        bot.run()

    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: %s", e)
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
